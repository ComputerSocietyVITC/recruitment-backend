# =============================================================================
# Docker Compose for recruitment backend
# =============================================================================
version: '3.8'

services:
  # Main application service
  recruitment-backend:
#    build:
#      context: .
#      dockerfile: Dockerfile
    image: recruitment-backend:latest
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=recruitment_user
      - DB_PASSWORD=recruitment_password
      - DB_NAME=recruitment_db
      - DB_MAX_CONNS=25
      - DB_MIN_CONNS=5
      # Add other environment variables as needed
      # These should be overridden in production with actual values
      - JWT_SECRET='Kz+3942TSYuNybFQAx2ieJUJOWksberr5g9i+TFjry4='
      - JWT_EXPIRY_DURATION=24h
      - EMAIL_VERIFICATION_OTP_DURATION=10m
      - PASSWORD_RESET_OTP_DURATION=30m
      - ADMIN_EMAIL=admin@comp.socks
      - ADMIN_PASSWORD=dCeKQFq8TdFm
      - ADMIN_PHONE=+911000000000
      - TRUSTED_PROXIES=127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL database service
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: recruitment_db
      POSTGRES_USER: recruitment_user
      POSTGRES_PASSWORD: recruitment_password
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./models/migrations:/docker-entrypoint-initdb.d/migrations:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recruitment_user -d recruitment_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

# Development override file: docker-compose.override.yml
# Create this file for development-specific configurations
